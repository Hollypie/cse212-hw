using Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter;

public static class Arrays
{
    /// <summary>
    /// This function will produce an array of size 'length' starting with 'number' followed by multiples of 'number'.  For 
    /// example, MultiplesOf(7, 5) will result in: {7, 14, 21, 28, 35}.  Assume that length is a positive
    /// integer greater than 0.
    /// </summary>
    /// <returns>array of doubles that are the multiples of the supplied number</returns>
    public static double[] MultiplesOf(double number, int length)
    {
        // TODO Problem 1 Start
        // Remember: Using comments in your program, write down your process for solving this problem
        // step by step before you write the code. The plan should be clear enough that it could
        // be implemented by another person.

        // Create a list to store the multiples generated by for loop processing the number and the desired number of multiples.
        List<double> multiplesList = new();

        // Create a Loop that iterates through numbers 1 through the "length" argument. For example: if the arguments were (3, 5) the range of the loop would be 1-5
        for (var i = 1; i < length + 1; i++)
        {
            // Multiply the "number" by the iteration of the loop.
            double num = i * number;
            // store or add the result in the multiples list.
            multiplesList.Add(num);
        }
        // Create a fixed array from the list of stored multiples.
        double[] newArray = multiplesList.ToArray();
        return newArray; // return the newArray that contains the multiples.
    }

    /// <summary>
    /// Rotate the 'data' to the right by the 'amount'.  For example, if the data is 
    /// List<int>{1, 2, 3, 4, 5, 6, 7, 8, 9} and an amount is 3 then the list after the function runs should be 
    /// List<int>{7, 8, 9, 1, 2, 3, 4, 5, 6}.  The value of amount will be in the range of 1 to data.Count, inclusive.
    ///
    /// Because a list is dynamic, this function will modify the existing data list rather than returning a new list.
    /// </summary>
    public static void RotateListRight(List<int> data, int amount)
    {
        // TODO Problem 2 Start
        // Remember: Using comments in your program, write down your process for solving this problem
        // step by step before you write the code. The plan should be clear enough that it could
        // be implemented by another person.

        // Use modulo on the amount, so that the "amount" never exceeds the length of the list.
        var formattedAmount = amount % data.Count();

        // Create a list that acts as a placeholder for the values that will be at the beginning of the new list order. It will gather the elements after the element to be shifted to the front.
        List<int> begin = data.GetRange(data.Count - formattedAmount, formattedAmount);
        // Create a list that acts as a placeholder for the values that will be at the end of the new list order. It will gather te elements before the element to be shifted to the front.
        List<int> end = data.GetRange(0, data.Count - formattedAmount);

        // Create a the new list with the new order of numbers.
        List<int> newList = new List<int>();

        // Populate the new list with the values from the list called begin and the list called end.
        newList.AddRange(begin);
        newList.AddRange(end);

        // Remove all of the content of the data list and repopulate it with the contents from the new list.

        data.Clear();
        data.AddRange(newList);

    }
    }


